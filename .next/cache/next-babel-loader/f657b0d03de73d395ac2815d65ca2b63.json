{"ast":null,"code":"const {\n  createServer\n} = require('http');\n\nconst {\n  parse\n} = require('url');\n\nconst next = require('next');\n\nconst dev = true;\nconst app = next({\n  dev\n});\nconst handle = app.getRequestHandler();\napp.prepare().then(() => {\n  createServer((req, res) => {\n    // Be sure to pass `true` as the second argument to `url.parse`.\n    // This tells it to parse the query portion of the URL.\n    const parsedUrl = parse(req.url, true);\n    const {\n      pathname,\n      query\n    } = parsedUrl;\n\n    if (pathname === '/a') {\n      app.render(req, res, '/a', query);\n    } else if (pathname === '/b') {\n      app.render(req, res, '/b', query);\n    } else {\n      handle(req, res, parsedUrl);\n    }\n  }).listen(3000, err => {\n    if (err) throw err;\n    console.log('> Ready on http://localhost:3000');\n  });\n});","map":{"version":3,"sources":["D:/Download/test/interview-fullstack-master/pages/api/server.js"],"names":["createServer","require","parse","next","dev","app","handle","getRequestHandler","prepare","then","req","res","parsedUrl","url","pathname","query","render","listen","err","console","log"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,MAAD,CAAhC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,OAAO,CAAC,KAAD,CAAzB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,GAAG,OAAT;AACA,MAAMC,GAAG,GAAGF,IAAI,CAAC;AAAEC,EAAAA;AAAF,CAAD,CAAhB;AACA,MAAME,MAAM,GAAGD,GAAG,CAACE,iBAAJ,EAAf;AAEAF,GAAG,CAACG,OAAJ,GAAcC,IAAd,CAAmB,MAAM;AACvBT,EAAAA,YAAY,CAAC,CAACU,GAAD,EAAMC,GAAN,KAAc;AACzB;AACA;AACA,UAAMC,SAAS,GAAGV,KAAK,CAACQ,GAAG,CAACG,GAAL,EAAU,IAAV,CAAvB;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAsBH,SAA5B;;AAEA,QAAIE,QAAQ,KAAK,IAAjB,EAAuB;AACrBT,MAAAA,GAAG,CAACW,MAAJ,CAAWN,GAAX,EAAgBC,GAAhB,EAAqB,IAArB,EAA2BI,KAA3B;AACD,KAFD,MAEO,IAAID,QAAQ,KAAK,IAAjB,EAAuB;AAC5BT,MAAAA,GAAG,CAACW,MAAJ,CAAWN,GAAX,EAAgBC,GAAhB,EAAqB,IAArB,EAA2BI,KAA3B;AACD,KAFM,MAEA;AACLT,MAAAA,MAAM,CAACI,GAAD,EAAMC,GAAN,EAAWC,SAAX,CAAN;AACD;AACF,GAbW,CAAZ,CAaGK,MAbH,CAaU,IAbV,EAaiBC,GAAD,IAAS;AACvB,QAAIA,GAAJ,EAAS,MAAMA,GAAN;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACD,GAhBD;AAiBD,CAlBD","sourcesContent":["const { createServer } = require('http')\r\nconst { parse } = require('url')\r\nconst next = require('next')\r\n\r\nconst dev = process.env.NODE_ENV !== 'production'\r\nconst app = next({ dev })\r\nconst handle = app.getRequestHandler()\r\n\r\napp.prepare().then(() => {\r\n  createServer((req, res) => {\r\n    // Be sure to pass `true` as the second argument to `url.parse`.\r\n    // This tells it to parse the query portion of the URL.\r\n    const parsedUrl = parse(req.url, true)\r\n    const { pathname, query } = parsedUrl\r\n\r\n    if (pathname === '/a') {\r\n      app.render(req, res, '/a', query)\r\n    } else if (pathname === '/b') {\r\n      app.render(req, res, '/b', query)\r\n    } else {\r\n      handle(req, res, parsedUrl)\r\n    }\r\n  }).listen(3000, (err) => {\r\n    if (err) throw err\r\n    console.log('> Ready on http://localhost:3000')\r\n  })\r\n})"]},"metadata":{},"sourceType":"script"}