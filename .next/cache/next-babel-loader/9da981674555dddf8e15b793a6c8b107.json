{"ast":null,"code":"import * as Joi from '@hapi/joi'; // This is the JOI validation schema, you define\n// all the validation logic in here, then run\n// the validation during the request lifecycle.\n// If you prefer to use your own way of validating the \n// incoming data, you can use it.\n\nconst schema = Joi.object({});\nexport default (async (req, res) => {\n  try {\n    // This will throw when the validation fails\n    console.log('schema ---> ', schema);\n    const data = await schema.validateAsync(req.body, {\n      abortEarly: false\n    }); // Write the new matrix to public/pricing.json\n\n    res.statusCode = 200;\n    res.json(data);\n  } catch (e) {\n    console.error(e);\n\n    if (e.isJoi) {\n      // Handle the validation error and return a proper response\n      res.statusCode = 422;\n      res.end('Error');\n      return;\n    }\n\n    res.statusCode = 500;\n    res.json({\n      error: 'Unknown Error'\n    });\n  }\n});","map":{"version":3,"sources":["D:/Download/test/interview-fullstack-master/pages/api/save-pricing.ts"],"names":["Joi","schema","object","req","res","console","log","data","validateAsync","body","abortEarly","statusCode","json","e","error","isJoi","end"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,WAArB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAJ,CAAyC,EAAzC,CAAf;AAIA,gBAAe,OAAOC,GAAP,EAA2CC,GAA3C,KAAmF;AAChG,MAAI;AACF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,MAA5B;AACA,UAAMM,IAAI,GAAG,MAAMN,MAAM,CAACO,aAAP,CAAqBL,GAAG,CAACM,IAAzB,EAA+B;AAChDC,MAAAA,UAAU,EAAE;AADoC,KAA/B,CAAnB,CAHE,CAOF;;AAEAN,IAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,IAAAA,GAAG,CAACQ,IAAJ,CAASL,IAAT;AACD,GAXD,CAWE,OAAMM,CAAN,EAAS;AACTR,IAAAA,OAAO,CAACS,KAAR,CAAcD,CAAd;;AACA,QAAGA,CAAC,CAACE,KAAL,EAAY;AACV;AACAX,MAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,MAAAA,GAAG,CAACY,GAAJ,CAAQ,OAAR;AACA;AACD;;AAEDZ,IAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,IAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAAT;AACD;AACF,CAxBD","sourcesContent":["import * as Joi from '@hapi/joi'\n\n// This is the JOI validation schema, you define\n// all the validation logic in here, then run\n// the validation during the request lifecycle.\n// If you prefer to use your own way of validating the \n// incoming data, you can use it.\nconst schema = Joi.object<import('../../types').Matrix>({\n\n})\n\nexport default async (req: import('next').NextApiRequest, res: import('next').NextApiResponse) => {\n  try {\n    // This will throw when the validation fails\n    console.log('schema ---> ', schema)\n    const data = await schema.validateAsync(req.body, {\n      abortEarly: false\n    }) as import('../../types').Matrix\n\n    // Write the new matrix to public/pricing.json\n\n    res.statusCode = 200\n    res.json(data)\n  } catch(e) {\n    console.error(e)\n    if(e.isJoi) {\n      // Handle the validation error and return a proper response\n      res.statusCode = 422\n      res.end('Error')\n      return\n    }\n    \n    res.statusCode = 500\n    res.json({ error: 'Unknown Error' })\n  }\n}"]},"metadata":{},"sourceType":"module"}