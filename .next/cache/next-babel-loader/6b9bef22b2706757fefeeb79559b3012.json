{"ast":null,"code":"import * as Joi from '@hapi/joi';\n\nvar fs = require('fs'); // This is the JOI validation schema, you define\n// all the validation logic in here, then run\n// the validation during the request lifecycle.\n// If you prefer to use your own way of validating the \n// incoming data, you can use it.\n\n\nconst schema = Joi.object({});\nexport default (async (req, res) => {\n  try {\n    // This will throw when the validation fails\n    let matrixData = req.body.data;\n    var json = JSON.stringify(matrixData); // const data = await schema.validateAsync(req.body.data, {\n    //   abortEarly: false\n    // }) as import('../../types').Matrix\n    // Write the new matrix to public/pricing.json\n\n    await fs.writeFileSync('../../public/pricing.json', json);\n    res.statusCode = 200;\n    res.json(json);\n  } catch (e) {\n    console.error(e);\n\n    if (e.isJoi) {\n      // Handle the validation error and return a proper response\n      res.statusCode = 422;\n      res.end('Error');\n      return;\n    }\n\n    res.statusCode = 500;\n    res.json({\n      error: 'Unknown Error'\n    });\n  }\n});","map":{"version":3,"sources":["D:/Download/test/interview-fullstack-master/pages/api/save-pricing.ts"],"names":["Joi","fs","require","schema","object","req","res","matrixData","body","data","json","JSON","stringify","writeFileSync","statusCode","e","console","error","isJoi","end"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,WAArB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB,C,CAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAGH,GAAG,CAACI,MAAJ,CAAyC,EAAzC,CAAf;AAIA,gBAAe,OAAOC,GAAP,EAA2CC,GAA3C,KAAmF;AAChG,MAAI;AACF;AACA,QAAIC,UAAU,GAAGF,GAAG,CAACG,IAAJ,CAASC,IAA1B;AACA,QAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAAX,CAHE,CAIF;AACA;AACA;AAEA;;AACA,UAAMN,EAAE,CAACY,aAAH,CAAiB,2BAAjB,EAA8CH,IAA9C,CAAN;AAEAJ,IAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AACAR,IAAAA,GAAG,CAACI,IAAJ,CAASA,IAAT;AACD,GAbD,CAaE,OAAMK,CAAN,EAAS;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;;AACA,QAAGA,CAAC,CAACG,KAAL,EAAY;AACV;AACAZ,MAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AACAR,MAAAA,GAAG,CAACa,GAAJ,CAAQ,OAAR;AACA;AACD;;AAEDb,IAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AACAR,IAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEO,MAAAA,KAAK,EAAE;AAAT,KAAT;AACD;AACF,CA1BD","sourcesContent":["import * as Joi from '@hapi/joi'\nvar fs = require('fs');\n\n// This is the JOI validation schema, you define\n// all the validation logic in here, then run\n// the validation during the request lifecycle.\n// If you prefer to use your own way of validating the \n// incoming data, you can use it.\nconst schema = Joi.object<import('../../types').Matrix>({\n\n})\n\nexport default async (req: import('next').NextApiRequest, res: import('next').NextApiResponse) => {\n  try {\n    // This will throw when the validation fails\n    let matrixData = req.body.data;\n    var json = JSON.stringify(matrixData);\n    // const data = await schema.validateAsync(req.body.data, {\n    //   abortEarly: false\n    // }) as import('../../types').Matrix\n\n    // Write the new matrix to public/pricing.json\n    await fs.writeFileSync('../../public/pricing.json', json);\n\n    res.statusCode = 200\n    res.json(json)\n  } catch(e) {\n    console.error(e)\n    if(e.isJoi) {\n      // Handle the validation error and return a proper response\n      res.statusCode = 422\n      res.end('Error')\n      return\n    }\n    \n    res.statusCode = 500\n    res.json({ error: 'Unknown Error' })\n  }\n}"]},"metadata":{},"sourceType":"module"}